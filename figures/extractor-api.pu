@startuml
package "Underlying ML library" {
  interface Predictor<R>
  interface DataFrame

  interface Classifier<R>
  interface Regressor<R>

  Predictor <|-- Classifier
  Predictor <|-- Regressor
}

package "Underlying Symbolic AI library" {
  interface Rule
  interface Theory

  Theory " " *-right- "*" Rule
}

package Psyke {
  interface Extractor<R, P : Predictor<T>> {
    + predictor: P
    + discretization: Discretization
    + extract(DataFrame): Theory
    + predict(DataFrame): R
  }

  interface Discretization {
    + features: Collection<DiscreteFeature>
  }

  Extractor "1" *-- "1" Discretization: wraps

  interface DiscreteFeature {
    + name: String
    + admissibleValues: Map<String, Value>
  }

  Discretization "1" o-- "N" DiscreteFeature

  abstract class Value

  DiscreteFeature "1" o-- "N" Value

  class Interval {
    + lower: Double
    + upper: Double
  }

  class Constant {
    + value: Any
  }

  Value <|-left- Interval
  Value <|-right- Constant
}

Extractor "1" *-- "1" Predictor: wraps

DataFrame -left-> Extractor: input of
Extractor --> Theory: output of
@enduml
